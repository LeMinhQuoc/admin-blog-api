<?php

namespace Proxies\__CG__\Kunstmaan\NodeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Node extends \Kunstmaan\NodeBundle\Entity\Node implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'parent', 'children', 'lft', 'lvl', 'rgt', 'nodeTranslations', 'deleted', 'hiddenFromNav', 'refEntityName', 'internalName', 'id'];
        }

        return ['__isInitialized__', 'parent', 'children', 'lft', 'lvl', 'rgt', 'nodeTranslations', 'deleted', 'hiddenFromNav', 'refEntityName', 'internalName', 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Node $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function isHiddenFromNav()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHiddenFromNav', []);

        return parent::isHiddenFromNav();
    }

    /**
     * {@inheritDoc}
     */
    public function getHiddenFromNav()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHiddenFromNav', []);

        return parent::getHiddenFromNav();
    }

    /**
     * {@inheritDoc}
     */
    public function setHiddenFromNav($hiddenFromNav)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHiddenFromNav', [$hiddenFromNav]);

        return parent::setHiddenFromNav($hiddenFromNav);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function setChildren($children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildren', [$children]);

        return parent::setChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function addNode(\Kunstmaan\NodeBundle\Entity\Node $child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNode', [$child]);

        return parent::addNode($child);
    }

    /**
     * {@inheritDoc}
     */
    public function getNodeTranslations($includeOffline = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNodeTranslations', [$includeOffline]);

        return parent::getNodeTranslations($includeOffline);
    }

    /**
     * {@inheritDoc}
     */
    public function setNodeTranslations(\Doctrine\Common\Collections\ArrayCollection $nodeTranslations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNodeTranslations', [$nodeTranslations]);

        return parent::setNodeTranslations($nodeTranslations);
    }

    /**
     * {@inheritDoc}
     */
    public function getNodeTranslation($lang, $includeOffline = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNodeTranslation', [$lang, $includeOffline]);

        return parent::getNodeTranslation($lang, $includeOffline);
    }

    /**
     * {@inheritDoc}
     */
    public function addNodeTranslation(\Kunstmaan\NodeBundle\Entity\NodeTranslation $nodeTranslation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNodeTranslation', [$nodeTranslation]);

        return parent::addNodeTranslation($nodeTranslation);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getParents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParents', []);

        return parent::getParents();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted($deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', [$deleted]);

        return parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function setRef(\Kunstmaan\NodeBundle\Entity\HasNodeInterface $entity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRef', [$entity]);

        return parent::setRef($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefEntityName', []);

        return parent::getRefEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function setInternalName($internalName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInternalName', [$internalName]);

        return parent::setInternalName($internalName);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalName', []);

        return parent::getInternalName();
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultAdminType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultAdminType', []);

        return parent::getDefaultAdminType();
    }

    /**
     * {@inheritDoc}
     */
    public function getLeft()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeft', []);

        return parent::getLeft();
    }

    /**
     * {@inheritDoc}
     */
    public function getRight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRight', []);

        return parent::getRight();
    }

    /**
     * {@inheritDoc}
     */
    public function getLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevel', []);

        return parent::getLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

}
